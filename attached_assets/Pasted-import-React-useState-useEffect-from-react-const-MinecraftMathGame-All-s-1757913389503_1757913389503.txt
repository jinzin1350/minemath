import React, { useState, useEffect } from 'react';

const MinecraftMathGame = () => {
  // All state variables properly defined
  const [level, setLevel] = useState(1);
  const [score, setScore] = useState(0);
  const [currentQuestion, setCurrentQuestion] = useState({ num1: 0, num2: 0 });
  const [userAnswer, setUserAnswer] = useState('');
  const [feedback, setFeedback] = useState('');
  const [showCelebration, setShowCelebration] = useState(false);
  const [hearts, setHearts] = useState(3);
  const [gameState, setGameState] = useState('playing');
  const [diamonds, setDiamonds] = useState(0);
  const [enemyPosition, setEnemyPosition] = useState(100);
  const [enemyAttacking, setEnemyAttacking] = useState(false);
  const [playerDefending, setPlayerDefending] = useState(false);
  const [currentEnemy, setCurrentEnemy] = useState(null);
  const [magicPower, setMagicPower] = useState(0);
  const [showMagicBlast, setShowMagicBlast] = useState(false);
  const [enemyMoving, setEnemyMoving] = useState(false);
  const [showPointsAnimation, setShowPointsAnimation] = useState(false);
  const [pointsEarned, setPointsEarned] = useState(0);
  const [defeatedEnemies, setDefeatedEnemies] = useState([]);

  const enemies = [
    { name: 'Zombie', speed: 8, sound: 'GRRRR!', defeatSound: 'ARGHHHH!' },
    { name: 'Skeleton', speed: 6, sound: 'CLACK!', defeatSound: 'CRACK!' },
    { name: 'Creeper', speed: 10, sound: 'SSSSSS!', defeatSound: 'BOOM!' },
    { name: 'Witch', speed: 5, sound: 'CACKLE!', defeatSound: 'NOOO!' },
    { name: 'Dragon', speed: 12, sound: 'ROAR!', defeatSound: 'DEFEATED!' }
  ];

  // Minecraft Steve - Compact for mobile
  const MinecraftSteve = ({ isDefending = false, scale = 1 }) => (
    <div className={`relative inline-block ${isDefending ? 'animate-pulse' : ''}`} style={{ transform: `scale(${scale})` }}>
      <div className="relative w-12 h-12 mb-1 mx-auto">
        <div className="absolute inset-0 bg-gradient-to-br from-orange-200 to-orange-300 rounded-sm"></div>
        <div className="absolute top-0 left-2 right-2 h-2 bg-amber-800 rounded-sm"></div>
        <div className="absolute top-3 left-3 w-1 h-1 bg-cyan-600 rounded-sm"></div>
        <div className="absolute top-3 right-3 w-1 h-1 bg-cyan-600 rounded-sm"></div>
        <div className="absolute top-5 left-1/2 transform -translate-x-1/2 w-2 h-1 bg-orange-600 rounded-sm"></div>
      </div>
      <div className="relative w-8 h-12 mx-auto mb-1">
        <div className="absolute inset-0 bg-gradient-to-br from-cyan-400 to-cyan-500 rounded-sm"></div>
      </div>
      <div 
        className="absolute top-12 -left-2 w-3 h-8 bg-gradient-to-br from-orange-200 to-orange-300 rounded-sm"
        style={{ transform: isDefending ? 'rotate(-45deg)' : 'rotate(-10deg)', transformOrigin: 'top center' }}
      ></div>
      <div 
        className="absolute top-12 -right-2 w-3 h-8 bg-gradient-to-br from-orange-200 to-orange-300 rounded-sm"
        style={{ transform: isDefending ? 'rotate(45deg)' : 'rotate(10deg)', transformOrigin: 'top center' }}
      ></div>
      <div className="absolute -bottom-4 left-1 w-3 h-8 bg-gradient-to-br from-blue-800 to-blue-900 rounded-sm"></div>
      <div className="absolute -bottom-4 right-1 w-3 h-8 bg-gradient-to-br from-blue-800 to-blue-900 rounded-sm"></div>
      
      {isDefending && (
        <div className="absolute -top-2 left-1/2 transform -translate-x-1/2 text-yellow-300 font-bold animate-bounce">⚡</div>
      )}
    </div>
  );

  // Minecraft Zombie - Compact
  const MinecraftZombie = ({ isAttacking = false, scale = 1 }) => (
    <div className={`relative inline-block ${isAttacking ? 'animate-bounce' : 'animate-pulse'}`} style={{ transform: `scale(${scale})` }}>
      <div className="relative w-12 h-12 mb-1 mx-auto">
        <div className="absolute inset-0 bg-gradient-to-br from-green-400 to-green-600 rounded-sm"></div>
        <div className="absolute top-0 left-2 right-2 h-2 bg-green-700 rounded-sm"></div>
        <div className="absolute top-3 left-3 w-1 h-1 bg-red-600 rounded-sm"></div>
        <div className="absolute top-3 right-3 w-1 h-1 bg-gray-200 rounded-sm"></div>
        <div className="absolute top-5 left-1/2 transform -translate-x-1/2 w-2 h-1 bg-gray-800 rounded-sm"></div>
      </div>
      <div className="relative w-8 h-12 mx-auto mb-1">
        <div className="absolute inset-0 bg-gradient-to-br from-cyan-600 to-cyan-700 rounded-sm"></div>
        <div className="absolute top-2 left-1 w-2 h-2 bg-gray-700 rounded-sm"></div>
      </div>
      <div 
        className="absolute top-12 -left-3 w-3 h-8 bg-gradient-to-br from-green-400 to-green-600 rounded-sm"
        style={{ transform: 'rotate(-30deg)', transformOrigin: 'top center' }}
      ></div>
      <div 
        className="absolute top-12 -right-3 w-3 h-8 bg-gradient-to-br from-green-400 to-green-600 rounded-sm"
        style={{ transform: 'rotate(30deg)', transformOrigin: 'top center' }}
      ></div>
      <div className="absolute -bottom-4 left-1 w-3 h-8 bg-gradient-to-br from-blue-700 to-blue-800 rounded-sm"></div>
      <div className="absolute -bottom-4 right-1 w-3 h-8 bg-gradient-to-br from-blue-700 to-blue-800 rounded-sm"></div>
    </div>
  );

  // Minecraft Block - Smaller for mobile
  const MinecraftBlock = ({ type, size = 16 }) => {
    const blockStyles = {
      grass: 'bg-gradient-to-b from-green-400 to-green-600 border-green-700',
      dirt: 'bg-gradient-to-b from-amber-600 to-amber-800 border-amber-900',
      stone: 'bg-gradient-to-b from-gray-500 to-gray-700 border-gray-800',
      diamond: 'bg-gradient-to-b from-cyan-400 to-cyan-600 border-cyan-700'
    };
    
    return (
      <div 
        className={`${blockStyles[type] || blockStyles.stone} border rounded-sm shadow-lg`}
        style={{ 
          width: `${size}px`, 
          height: `${size}px`,
          imageRendering: 'pixelated'
        }}
      ></div>
    );
  };

  // Generate question
  const generateQuestion = () => {
    let num1, num2;
    const maxNum = Math.min(5 + level * 2, 15);
    num1 = Math.floor(Math.random() * maxNum) + 1;
    num2 = Math.floor(Math.random() * maxNum) + 1;
    setCurrentQuestion({ num1, num2 });
    
    if (level <= enemies.length) {
      setCurrentEnemy(enemies[level - 1]);
      setEnemyPosition(100);
      setEnemyMoving(true);
    }
  };

  // Enemy movement
  useEffect(() => {
    if (enemyMoving && currentEnemy && enemyPosition > 0) {
      const interval = setInterval(() => {
        setEnemyPosition(prev => {
          const newPos = prev - (currentEnemy.speed / 10);
          if (newPos <= 0) {
            setEnemyAttacking(true);
            setEnemyMoving(false);
            setTimeout(() => {
              setHearts(h => h - 1);
              if (hearts - 1 <= 0) {
                setGameState('gameOver');
              } else {
                setEnemyPosition(100);
                setEnemyAttacking(false);
                setEnemyMoving(true);
              }
            }, 1000);
            return 0;
          }
          return newPos;
        });
      }, 100);
      return () => clearInterval(interval);
    }
  }, [enemyMoving, currentEnemy, enemyPosition, hearts]);

  useEffect(() => {
    generateQuestion();
  }, [level]);

  // Handle answer with points system
  const handleSubmit = () => {
    const correct = currentQuestion.num1 + currentQuestion.num2;
    const answer = parseInt(userAnswer);

    if (answer === correct) {
      // Award 10 points for correct answer
      const earnedPoints = 10;
      setPointsEarned(earnedPoints);
      setShowPointsAnimation(true);
      setPlayerDefending(true);
      setShowMagicBlast(true);
      setEnemyMoving(false);
      setScore(score + earnedPoints);
      setDiamonds(diamonds + 1);
      setMagicPower(magicPower + level);
      
      if (currentEnemy && !defeatedEnemies.includes(currentEnemy.name)) {
        setDefeatedEnemies(prev => [...prev, currentEnemy.name]);
        setFeedback(`💥 ${currentEnemy.name} DEFEATED! +${earnedPoints} POINTS! 🌟`);
      } else {
        setFeedback(`✨ Perfect! +${earnedPoints} POINTS! 🌟`);
      }
      
      setShowCelebration(true);
      
      setTimeout(() => {
        setShowCelebration(false);
        setShowMagicBlast(false);
        setPlayerDefending(false);
        setShowPointsAnimation(false);
        setFeedback('');
        setUserAnswer('');
        
        if (score + earnedPoints >= level * 50) {
          if (level < 5) {
            setLevel(level + 1);
            setFeedback(`🎊 LEVEL UP! Now Level ${level + 1}! 🎊`);
          } else {
            setGameState('levelComplete');
          }
        } else {
          generateQuestion();
        }
      }, 2000);
    } else {
      setFeedback(`❌ Wrong! Answer: ${correct} (No points)`);
      setEnemyPosition(prev => Math.max(0, prev - 25));
      
      setTimeout(() => {
        setFeedback('');
        setUserAnswer('');
      }, 2000);
    }
  };

  // Restart game
  const restartGame = () => {
    setLevel(1);
    setScore(0);
    setHearts(3);
    setDiamonds(0);
    setMagicPower(0);
    setDefeatedEnemies([]);
    setEnemyPosition(100);
    setEnemyAttacking(false);
    setPlayerDefending(false);
    setEnemyMoving(false);
    setShowMagicBlast(false);
    setShowPointsAnimation(false);
    setUserAnswer('');
    setFeedback('');
    setGameState('playing');
    generateQuestion();
  };

  // Render current enemy
  const renderEnemy = () => {
    if (!currentEnemy) return null;
    
    return (
      <div 
        className="absolute bottom-2 transition-all duration-100"
        style={{ right: `${enemyPosition}%` }}
      >
        <MinecraftZombie isAttacking={enemyAttacking} scale={0.8} />
        <div className="text-xs text-center font-bold text-red-400 mt-1" style={{ fontFamily: 'monospace' }}>
          {currentEnemy.name}
        </div>
      </div>
    );
  };

  // Game Over Screen
  if (gameState === 'gameOver') {
    return (
      <div className="min-h-screen bg-gradient-to-b from-red-800 to-black flex items-center justify-center p-4">
        <div className="bg-gray-900 rounded-lg p-6 text-center border-4 border-red-600 w-full max-w-sm">
          <div className="mb-4">
            <MinecraftZombie scale={1.2} />
          </div>
          <h2 className="text-2xl font-bold text-red-400 mb-4" style={{ fontFamily: 'monospace' }}>GAME OVER</h2>
          <div className="bg-gray-800 p-3 rounded mb-4 text-sm">
            <p className="text-white">Score: {score}</p>
            <p className="text-cyan-400">Diamonds: {diamonds}</p>
            <p className="text-green-400">Correct: {Math.floor(score/10)}</p>
            <p className="text-red-400">Wrong: {wrongAnswers}</p>
          </div>
          <button 
            onClick={restartGame}
            className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded text-lg w-full"
            style={{ fontFamily: 'monospace' }}
          >
            RESPAWN
          </button>
        </div>
      </div>
    );
  }

  // Victory Screen
  if (gameState === 'levelComplete') {
    return (
      <div className="min-h-screen bg-gradient-to-b from-yellow-400 to-orange-500 flex items-center justify-center p-4">
        <div className="bg-gray-900 rounded-lg p-6 text-center border-4 border-yellow-500 w-full max-w-sm">
          <div className="mb-4">
            <MinecraftSteve scale={1.5} />
          </div>
          <h2 className="text-2xl font-bold text-yellow-400 mb-4" style={{ fontFamily: 'monospace' }}>VICTORY!</h2>
          <div className="bg-gray-800 p-3 rounded mb-4 text-sm">
            <p className="text-white">Score: {score}</p>
            <p className="text-cyan-400">Diamonds: {diamonds}</p>
          </div>
          <button 
            onClick={restartGame}
            className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded text-lg w-full"
            style={{ fontFamily: 'monospace' }}
          >
            NEW GAME
          </button>
        </div>
      </div>
    );
  }

  // Main Game - Mobile Optimized
  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-800 to-green-800 p-2" style={{ imageRendering: 'pixelated' }}>
      {/* Header - Compact for mobile */}
      <div className="bg-gray-900 rounded-lg p-3 mb-3 border-2 border-gray-600">
        <div className="flex justify-between items-center text-white text-sm" style={{ fontFamily: 'monospace' }}>
          <div className="flex gap-2 items-center">
            <span>LV {level}</span>
            <span>⭐{score}</span>
            <span className="text-cyan-400">💎{diamonds}</span>
            <span className="text-purple-400">⚡{magicPower}</span>
          </div>
          <div className="flex gap-1">
            {[...Array(3)].map((_, i) => (
              <span key={i} className={i < hearts ? 'text-red-500' : 'text-gray-600'}>❤️</span>
            ))}
          </div>
        </div>
      </div>

      {/* Battle Arena - Optimized for mobile */}
      <div className="relative h-32 mb-3 rounded-lg border-2 border-gray-800 bg-gradient-to-b from-blue-400 to-green-400 overflow-hidden">
        {/* Enemy distance indicator */}
        <div className="absolute top-1 left-2 bg-black bg-opacity-70 text-white px-2 py-1 rounded text-xs" style={{ fontFamily: 'monospace' }}>
          ENEMY: {Math.round(enemyPosition)}%
          {enemyPosition < 25 && <span className="text-red-400 ml-1 animate-pulse">DANGER!</span>}
        </div>

        {/* Terrain */}
        <div className="absolute bottom-0 left-0 right-0 h-6 bg-green-600"></div>
        <div className="absolute bottom-0 left-0 right-0 h-4 bg-amber-700"></div>
        
        {/* Player */}
        <div className="absolute bottom-6 left-4">
          <MinecraftSteve isDefending={playerDefending} scale={0.7} />
        </div>

        {/* Enemy */}
        {renderEnemy()}

        {/* Magic blast */}
        {showMagicBlast && (
          <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2">
            <div className="w-8 h-8 bg-yellow-400 rounded-full animate-ping opacity-80"></div>
            <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-lg">⚡</div>
          </div>
        )}
      </div>

      {/* Warning Message */}
      {enemyPosition < 40 && (
        <div className="bg-red-800 border-2 border-red-500 rounded p-2 mb-3 animate-pulse">
          <p className="text-red-200 font-bold text-center text-sm" style={{ fontFamily: 'monospace' }}>
            ⚠️ {currentEnemy?.name.toUpperCase()} APPROACHING! ⚠️
          </p>
        </div>
      )}

      {/* Math Question Section - Mobile Layout */}
      <div className="bg-gray-900 rounded-lg p-4 border-2 border-yellow-500 mb-3">
        <div className="text-yellow-400 text-center text-sm mb-3 font-bold" style={{ fontFamily: 'monospace' }}>
          COUNT THE BLOCKS TO ATTACK:
        </div>
        
        {/* Visual blocks - Mobile friendly grid */}
        <div className="bg-gray-800 p-3 rounded mb-3">
          <div className="flex justify-center items-center gap-2 mb-2">
            {/* First number blocks */}
            <div className="flex flex-wrap gap-1 justify-center max-w-24">
              {[...Array(currentQuestion.num1)].map((_, i) => (
                <div key={`block1-${i}`} className="animate-bounce" style={{ animationDelay: `${i * 0.1}s` }}>
                  <MinecraftBlock type="stone" size={16} />
                </div>
              ))}
            </div>
            
            <div className="text-xl font-bold text-yellow-400" style={{ fontFamily: 'monospace' }}>+</div>
            
            {/* Second number blocks */}
            <div className="flex flex-wrap gap-1 justify-center max-w-24">
              {[...Array(currentQuestion.num2)].map((_, i) => (
                <div key={`block2-${i}`} className="animate-bounce" style={{ animationDelay: `${(currentQuestion.num1 + i) * 0.1}s` }}>
                  <MinecraftBlock type="dirt" size={16} />
                </div>
              ))}
            </div>
          </div>
          
          <div className="text-center text-xs text-gray-400 mb-2" style={{ fontFamily: 'monospace' }}>
            GRAY: {currentQuestion.num1} + BROWN: {currentQuestion.num2}
          </div>
        </div>

        {/* Input and Button Section */}
        <div className="text-center">
          <div className="text-2xl font-bold text-white mb-3" style={{ fontFamily: 'monospace' }}>
            {currentQuestion.num1} + {currentQuestion.num2} = ?
          </div>
          
          <div className="flex justify-center items-center gap-3 mb-3">
            <input
              type="number"
              value={userAnswer}
              onChange={(e) => setUserAnswer(e.target.value)}
              className="text-2xl font-bold text-center border-2 border-yellow-500 bg-gray-800 text-white rounded p-2 w-20"
              style={{ fontFamily: 'monospace' }}
              placeholder="?"
              onKeyPress={(e) => e.key === 'Enter' && userAnswer && handleSubmit()}
              autoFocus
            />
            <button
              onClick={handleSubmit}
              disabled={!userAnswer}
              className="bg-red-600 hover:bg-red-700 disabled:bg-gray-600 text-white font-bold py-2 px-4 rounded border-2 border-red-800"
              style={{ fontFamily: 'monospace' }}
            >
              ⚔️ ATTACK!
            </button>
          </div>
        </div>
      </div>

      {/* Feedback */}
      {feedback && (
        <div className={`font-bold p-3 rounded border-2 mb-3 text-center ${
          feedback.includes('DEFEATED') || feedback.includes('Perfect') ? 
          'bg-green-800 text-green-200 border-green-500' : 
          'bg-red-800 text-red-200 border-red-500'
        }`} style={{ fontFamily: 'monospace' }}>
          {feedback}
        </div>
      )}

      {/* Progress and Inventory - Compact */}
      <div className="bg-gray-800 rounded-lg p-3 border-2 border-gray-600">
        <div className="mb-2">
          <div className="text-yellow-400 text-xs mb-1 font-bold text-center" style={{ fontFamily: 'monospace' }}>
            LEVEL {level} PROGRESS
          </div>
          <div className="w-full bg-gray-700 rounded h-2 border border-gray-500">
            <div 
              className="bg-gradient-to-r from-green-400 to-yellow-400 h-full rounded transition-all duration-500"
              style={{ width: `${Math.min((score % (level * 50)) / (level * 50) * 100, 100)}%` }}
            />
          </div>
          <div className="text-gray-400 text-xs text-center mt-1" style={{ fontFamily: 'monospace' }}>
            {score % (level * 50)}/{level * 50} EXP
          </div>
        </div>
        
        <div className="flex justify-center gap-1 items-center">
          {[...Array(Math.min(diamonds, 6))].map((_, i) => (
            <MinecraftBlock key={i} type="diamond" size={16} />
          ))}
          <span className="text-cyan-400 text-xs ml-2" style={{ fontFamily: 'monospace' }}>
            💎{diamonds}
          </span>
        </div>
      </div>

      {/* Celebration overlay */}
      {showCelebration && (
        <div className="fixed inset-0 flex items-center justify-center z-50 pointer-events-none">
          <div className="text-6xl animate-ping">🔥</div>
        </div>
      )}

      {/* Points Animation */}
      {showPointsAnimation && (
        <div className="fixed inset-0 flex items-center justify-center z-50 pointer-events-none">
          <div className="bg-yellow-400 text-black font-bold text-2xl px-4 py-2 rounded-lg border-4 border-yellow-600 animate-bounce shadow-2xl" style={{ fontFamily: 'monospace' }}>
            +{pointsEarned} POINTS!
          </div>
        </div>
      )}
    </div>
  );
};

export default MinecraftMathGame;